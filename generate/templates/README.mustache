# {{#lambda.uppercase}}{{{packageName}}}{{/lambda.uppercase}} <sup>Â®</sup> Python SDK

This is the Python SDK for [{{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}} by FINBOURNE](https://www.finbourne.com), part of our  bi-temporal investment management data platform with portfolio accounting capabilities. To use it you'll need a LUSID account. [Sign up for free at lusid.com](https://www.lusid.com/app/signup)

This is version {{packageVersion}} of the {{projectName}}. Version 1 can be found [here](https://github.com/finbourne/{{projectName}}-python-preview).


<a href="https://www.lusid.com/app/signup"><img src="https://content.finbourne.com/LUSID_repo.png" alt="{{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}}_by_FINBOURNE"></a>

[![pypi](https://img.shields.io/pypi/v/{{projectName}})](https://pypi.org/project/{{projectName}}/)
[![python](https://img.shields.io/pypi/pyversions/{{projectName}}.svg)](https://pypi.python.org/pypi/{{projectName}})

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}

{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Requirements.

Python {{{generatorLanguageVersion}}}

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install {{projectName}}
```
Then import the package:
```python
import {{{packageName}}}
```

### Tests

Execute `pytest` to run the tests.

### Authenticating to {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}}

You'll need to provide some configuration to connect to the {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}} application. This will include an [API URL](https://support.lusid.com/knowledgebase/article/KA-01787/en-us).
These can be provided using a secrets file or environment variables.

#### Environment variables

In order to use [short lived access tokens](https://support.lusid.com/knowledgebase/article/KA-01654/en-us) you will need to have appropriate values set for the following environment variables:

``` 
FBN_TOKEN_URL,
{{#lambda.uppercase}}FBN_{{packageName}}_API_URL{{/lambda.uppercase}},
FBN_USERNAME,
FBN_PASSWORD,
FBN_CLIENT_ID,
FBN_CLIENT_SECRET
```

To use a long lived Personal Access Token, you must provide the following environment variables:
``` 
{{#lambda.uppercase}}FBN_{{packageName}}_API_URL{{/lambda.uppercase}},
FBN_ACCESS_TOKEN
```

You can send your requests to {{packageName}} via a proxy, by setting `FBN_PROXY_ADDRESS`. 
If your proxy has basic auth enabled, you must also supply `FBN_PROXY_USERNAME` and `FBN_PROXY_PASSWORD`

By default, the {{packageName}} will use your system certificates to validate HTTPS connections. 
To pass a different certificate file to the SDK set the `FBN_CLIENT_CERTIFICATE` environment variable to the path storing the root certificates.

#### Secrets file

In order to use [short lived access tokens](https://support.lusid.com/knowledgebase/article/KA-01654/en-us) you will need to have appropriate values set in a `secrets.json` file in the same folder as your script.

```json
{
    "api":
    {
        "tokenUrl":"<your-token-url>",
        "{{packageName}}Url":"<FINBOURNE-application-url>",
        "username":"<your-username>",
        "password":"<your-password>",
        "clientId":"<your-client-id>",
        "clientSecret":"<your-client-secret>",
    }
}
```

To use a long lived Personal Access Token, you must provide a `secrets.json` with the following variables:
```json
{
    "api":
    {
        "{{packageName}}Url":"<FINBOURNE-application-url>",
        "accessToken":"<your-access-token>"
    }
}
```

You can send your requests to {{packageName}} via a proxy, by adding a proxy section to your `secrets.json`. 
If your proxy has basic auth enabled, you must also supply a `username` and `password` in this section.

```json
{
    "api":
    {
        "{{packageName}}Url":"<FINBOURNE-application-url>",
        "accessToken":"<your-access-token>"
    },
    "proxy":
    {
        "address":"<your-proxy-address>",
        "username":"<your-proxy-username>",
        "password":"<your-proxy-password>"
    }
}
```

By default, the {{packageName}} will use your system certificates to validate HTTPS connections. 
To pass a different certificate file to the SDK set the `clientCertificate`variable to the path storing the root certificates:

```json
    "api":
    {
        "{{packageName}}Url":"<FINBOURNE-application-url>",
        "accessToken":"<your-access-token>"
        "clientCertificate":"certificates.pem"
    },

```

### Using the {{projectName}} to make requests to FINBOURNE's {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}} application

To make requests to {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}}, you will first need to build a {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}} API object.

The {{packageName}}.extensions module contains useful components to build and configure APIs.

#### Configuration loaders

The `{{packageName}}.extensions.configuration_loaders` module contains our `ConfigurationLoader` [protocol](https://peps.python.org/pep-0544/), 
classes that implement the `ConfigurationLoader` protocol, and a default set of configuration loaders that can be used to read configuration in from different sources.

Objects that are compatible with the `ConfigurationLoader` interface will return a dictionary of attributes that are used to configure the {{packageName}} APIs and `ApiClient`.

##### SecretsFileConfigurationLoader

Use this config loader to read values from a secrets file, with a [specific format](#secrets-file).

You can pass a filepath to the SecretsFileConfigurationLoader to open the file and read the auth configuration.
```python
from {{packageName}} import SecretsFileConfigurationLoader


secrets_file_path = "secrets.json"
config_loaders = (SecretsFileConfigurationLoader(api_secrets_file=secrets_file_path),)
```
Alternatively, pass a handle to an already open file.

```python
from {{packageName}} import SecretsFileConfigurationLoader


secrets_file_path = "secrets.json"
with open(secrets_file_path) as secrets_file
    config_loaders = (SecretsFileConfigurationLoader(api_secrets_file=secrets_file),)
```

##### EnvironmentVariablesConfigurationLoader

Use this config loader to read values from environment variables, with [specific keys](#environment-variables).

```python
from {{packageName}} import EnvironmentVariablesConfigurationLoader

config_loaders = (EnvironmentVariablesConfigurationLoader(),)
```

#### ApiClientFactory & SyncApiClientFactory

You can use an `ApiClientFactory` to build API objects with authentication and other configuration. To build an API with a synchronous API client please use our `SyncApiClientFactory`.

An `ApiClientFactory` takes a set of configuration_loaders, reading values from each loader in order (last write wins).
If you do not supply any configuration loaders, the `ApiClientFactory` will read from environment variables and a `secrets.json` file in the current working directory by default.

```python
from {{packageName}} import SecretsFileConfigurationLoader, EnvironmentVariablesConfigurationLoader, ApiClientFactory


secrets_file_path = "secrets.json"
with open(secrets_file_path) as secrets_file
    config_loaders = (SecretsFileConfigurationLoader(api_secrets_file=secrets_file)
                      EnvironmentVariablesConfigurationLoader())
    api_client_factory = ApiClientFactory(config_loaders=config_loaders)
```
Once you have built an `ApiClientFactory`, you can use it to build API instances.
```python
# Enter a context with an instance of the ApiClientFactory to ensure the connection pool is closed after use
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}{{#asyncio}}async {{/asyncio}}with api_client_factory:
    # Create an instance of the API class
    api_instance = api_client_factory.build({{{classname}}})

    # And then use API instances to send requests, and deserialise responses:
    {{#allParams}}
    {{paramName}} = {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
    {{/allParams}}

    try:
        {{#summary}}
        # {{{.}}}
        {{/summary}}
        {{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}{{paramName}}={{paramName}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})
        {{#returnType}}
        print("The response of {{classname}}->{{operationId}}:\n")
        pprint(api_response)
        {{/returnType}}
    except ApiException as e:
        print("Exception when calling {{classname}}->{{operationId}}: %s\n" % e)
    {{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

##### Setting request timeouts

You can set the timeout for a request by passing the `_request_timeout` kwarg:
```python
request_timeout = 100 # 100s timeout
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
{{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}{{paramName}}={{paramName}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}_request_timeout=request_timeout){{#returnType}}{{/returnType}}{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

### Apis

You'll need to build an Api object to send requests to LUSID.

A full list of APIs and their associated endpoints can be found [here](/sdk/docs/apis.md).

### Models

Api methods will often take a set of {{#lambda.uppercase}}{{packageName}}{{/lambda.uppercase}} model objects. They will also return model objects.

A full list of model objects can be found [here](/sdk/docs/models.md).
